""" ===============================
    PROYECTO: POLIMORFISMO EN POO
==============================="""

"""Este programa simula un grupo de personajes con diferentes clases (Mago, Guerrero, Arquero),
todos heredan de una clase base llamada Personaje. Cada uno tiene su propia forma de atacar,
demostrando el concepto de polimorfismo: una misma acci√≥n (atacar) se comporta diferente
seg√∫n el tipo de objeto que la ejecuta."""

#Clase base: Personaje
class Personaje:
    def __init__(self, nombre):
        self.nombre = nombre

    # M√©todo gen√©rico de ataque. Este ser√° sobrescrito por las clases hijas.
    def atacar(self):
        print(f"{self.nombre} realiza un ataque b√°sico.")  # Comportamiento por defecto


#Clase hija: Mago

class Mago(Personaje):
    # Sobrescribimos el m√©todo atacar para que el mago lance un hechizo
    def atacar(self):
        print(f"{self.nombre} lanza una bola de fuego üî•.")  # Ataque m√°gico

# Clase hija: Guerrero
class Guerrero(Personaje):
    # Sobrescribimos el m√©todo atacar para que el guerrero use su espada
    def atacar(self):
        print(f"{self.nombre} ataca con su espada ‚öîÔ∏è.")  # Ataque f√≠sico

# Clase hija: Arquero
class Arquero(Personaje):
    # Sobrescribimos el m√©todo atacar para que el arquero dispare una flecha
    def atacar(self):
        print(f"{self.nombre} dispara una flecha üèπ.")  # Ataque a distancia

# -------------------------------
# Simulaci√≥n de combate
# -------------------------------

"""
Se crea una lista de personajes de diferentes clases
Aunque todos son tratados como objetos de tipo Personaje,
cada uno ejecuta su propia versi√≥n del m√©todo atacar()
"""

personajes = [
    Mago("Merl√≠n"),        # Instancia de Mago
    Guerrero("Thorgar"),   # Instancia de Guerrero
    Arquero("Lina")        # Instancia de Arquero
]

# Recorremos la lista y llamamos al m√©todo atacar()
  # Aqu√≠ ocurre el polimorfismo: misma llamada, diferentes comportamientos
print("=== COMBATE INICIADO ===\n")
for personaje in personajes:
    personaje.atacar()  # Cada clase ejecuta su propia versi√≥n del m√©todo
